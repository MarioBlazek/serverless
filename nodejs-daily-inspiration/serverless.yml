service: nodejs-daily-inspiration
frameworkVersion: '3'

custom:
  tableName: 'users-table-${sls:stage}'
  region: ${self:provider.region}

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: dev
  iam:
    role:
      statements:
        - Effect: Allow
          Action: SNS:Publish
          Resource: !Ref QuotesMessages
        - Effect: Allow
          Action: "s3:*"
          Resource: "*"
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ UsersTable, Arn ]
  environment:
    SENDGRID_API_KEY: ${env:SENDGRID_API_KEY}
    USERS_TABLE: ${self:custom.tableName}
    REGION: ${self:provider.region}
    SNS_TOPIC_ARN: ${env:SNS_TOPIC_ARN}
    S3_BUCKET: ${env:S3_BUCKET}
    FROM_EMAIL: ${env:FROM_EMAIL}

functions:
  staticMailer:
    handler: handlers/staticMailer.staticMailer
    events:
      - http:
          path: static-mailer
          method: post
          cors: true
  
  quotes:
    handler: handlers/getQuotes.getQuotes
    events:
      - http:
          path: quotes
          method: get
          cors: true
  
  subscribe:
    handler: handlers/subscribeUser.subscribeUser
    events:
      - http:
          path: subscribe
          method: post
          cors: true
  
  sendEmail:
    handler: handlers/sendEmail.sendEmail
    events:
      - http:
          path: send-email
          method: post
          cors: true
      - schedule: cron(0 13 * * ? *)


  getSubscribers:
    handler: handlers/getSubscribers.getSubscribers
    events:
      - http:
          path: subscribers
          method: get
          cors: true

resources:
  Resources:
    QuotesMessages:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: quotes-messages-${self:provider.stage}
    QuotesMessagesSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref QuotesMessages
        Protocol: email
        Endpoint: ${self:provider.environment.FROM_EMAIL}
        DeliveryPolicy:
          healthyRetryPolicy:
            numRetries: 20
            minDelayTarget: 30
            maxDelayTarget: 600
            backoffFunction: exponential
    
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableName}
